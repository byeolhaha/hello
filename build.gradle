plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.10'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	asciidoctorExt
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	snippetsDir = file('build/generated-snippets')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//rest docs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	//mongodb
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

	//websocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	//validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//gcp
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter', version: '1.2.8.RELEASE'
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-gcp-storage', version: '1.2.8.RELEASE'

	// Google Speech To Text
	implementation(platform("com.google.cloud:libraries-bom:26.1.4"))
	implementation("com.google.cloud:google-cloud-speech")
	implementation("com.google.protobuf:protobuf-java:3.21.12")
	implementation("com.fasterxml.jackson.core:jackson-databind")

	// h2
	runtimeOnly 'com.h2database:h2'

	//coolsms
	implementation 'net.nurigo:sdk:4.3.0'

	// 서킷브레이커
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.boot:spring-boot-starter-aop")
	implementation "io.github.resilience4j:resilience4j-spring-boot3:2.2.0"
	implementation "io.github.resilience4j:resilience4j-all:2.2.0"

    // open-feign
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.3'

	//google-translation
	implementation 'com.google.cloud:google-cloud-translate:2.42.0'

	// Aho-corasick algorithm
	implementation 'org.ahocorasick:ahocorasick:0.6.3'

	// caffeine 캐시
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'com.github.ben-manes.caffeine:caffeine'

}
ext {
	set('springCloudVersion', "2022.0.3")
}

dependencyManagement {

	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}

}

test {
	outputs.dir snippetsDir // 스니펫이 생성되는 디렉터리를 설정
	useJUnitPlatform()
}

asciidoctor {
	configurations 'asciidoctorExt'
	baseDirFollowsSourceFile()
	inputs.dir snippetsDir
	dependsOn test
	outputDir file('build/docs/asciidoc')
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("${asciidoctor.outputDir}")
	into file("src/main/resources/static/docs")
}


build {
	dependsOn copyDocument
}

bootJar {
	archiveFileName = "${rootProject.name}.jar"
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}") {
		into 'static/docs'
	}
}

jar {
	enabled = false
}
